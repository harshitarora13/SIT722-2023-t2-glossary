<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <title>SIT722 DevOps Glossary</title>
  <style>
    /* Additional CSS for grid lines */
    table {
      border-collapse: collapse;
      width: 100%;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    .small-column {
      /* Style for the smaller 1st column */
      width: 10%; /* Adjust the width as needed */
    }
    tr:nth-child(even) {
      background-color: #f2f2f2;
    }
    th {
      background-color: #007bff;
      color: white;
    }
    tr:hover {
      background-color: #ddd;
    }
  </style>
</head>
<body>
  <h1>SIT722 DevOps Glossary</h1>
  <h2>Welcome to my website showing a collection of DevOps terms and their brief descriptions</h2>
  <table>
    <thead>
      <tr>
        <th class="small-column">ID#</th>
        <th>Term</th>
        <th>Description</th>
        <th>References</th>
      </tr>
    </thead>+
    <tbody>
        <tr>
          <td>1.</td>
          <td>DevOps</td>
          <td>
            For software development, DevOps is comparable to a team sport. The key is to have a close working relationship between those who create the program and those who ensure that it functions properly.
          </td>
          <td>
             Wikipedia Contributors, “DevOps,” Wikipedia, Dec. 01, 2019. https://en.wikipedia.org/wiki/DevOps.
            </td>
        </tr>
        <tr>
          <td>2.</td>
          <td>Continous Integration</td>
          <td>
            Continuous Integration (CI) is a development technique in which frequent automatic integration of changed code into a shared repository is used. To ensure the quality of the code, each integration starts automated tests. Early in the development cycle, it assists in locating and fixing problems.
          </td>
          <td>
            Atlassian (2019). Continuous integration vs. continuous delivery vs. continuous deployment. [online] Atlassian. Available at: https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.
          </td>
        </tr>
        <tr>
          <td>3.</td>
          <td>Continous Delivery</td>
          <td>
            The goal of Continuous distribution (CD), a branch of Continuous Integration (CI), is to automate the distribution of code to environments in production or staging. It seeks to guarantee that code is constantly in a deployable condition and prepared for deployment.
          </td>
          <td>
            Atlassian, “Continuous integration vs. continuous delivery vs. continuous deployment,” Atlassian, 2019. https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.
          </td>
        </tr>
        <tr>
          <td>4.</td>
          <td>Version Control System</td>
          <td>
            Multiple developers can effectively cooperate on a project with the help of a version control system (VCS), a technology that keeps track of changes to source code over time. It helps resolve conflicts and preserves a record of code revisions. A popular VCS is called Git.
          </td>
          <td>
            Git, “Git - About Version Control,” Git-scm.com, 2019. https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control.
          </td>
        </tr>
        <tr>
          <td>5.</td>
          <td>Containerization</td>
          <td>
            With the use of the technology known as containerization, a program and all of its dependencies can be packaged into a small, transportable container. When used with tools like Docker, containers provide consistency across several environments and facilitate quick deployment.
          </td>
          <td>
            Docker, “What is a Container?,” Docker, 2023. https://www.docker.com/resources/what-container/.
          </td>
        </tr>
        <tr>
          <td>6.</td>
          <td>Orchestration</td>
          <td>
            Applications running in containers are managed and coordinated automatically through orchestration to make sure they are effective and scale as required. Popular orchestration tool Kubernetes is widely used.
          </td>
          <td>
            “Overview,” Kubernetes. https://kubernetes.io/docs/concepts/overview/
          </td>
        </tr>
        <tr>
          <td>7.</td>
          <td>Infrastructure as code</td>
          <td>
            Using code and automation scripts, infrastructure as code (IaC) manages and provisionally deploys infrastructure (servers, networks, etc.). It makes infrastructure setup repeatable and consistent.
          </td>
          <td>
            Amazon Web Services, Inc. (n.d.). What is DevOps? - DevOps Models Explained - Amazon Web Services (AWS). [online] Available at: https://aws.amazon.com/devops/what-is-devops/#Infrastructure_as_Code_IaC [Accessed 8 Oct. 2023].
          </td>
        </tr>
        <tr>
          <td>8.</td>
          <td>Continnous Monitoring</td>
          <td>
            Real-time performance and infrastructure health are monitored continuously to determine how well they are working. It aids in problem detection, maintains the dependability of the system, and optimizes resource utilization.
          </td>
          <td>
            Wikipedia. (2023). Continuous monitoring. [online] Available at: https://en.wikipedia.org/wiki/Continuous_monitoring [Accessed 8 Oct. 2023].
          </td>
        </tr>
        <tr>
          <td>9.</td>
          <td>Microservices</td>
          <td>
            A large application is divided into a number of small, independent services called microservices. These services can be created, deployed, and scaled individually. It supports scalability and adaptability.
          </td>
          <td>
            Richardson, C. (2017). Microservices.io. [online] microservices.io. Available at: https://microservices.io/.
          </td>
        </tr>
        <tr>
          <td>10.</td>
          <td>Deployment Pipeline</td>
          <td>
            From development to production, code follows an automated process called a deployment pipeline. For a consistent release process, it typically consists of building, testing, and deploying stages.
          </td>
          <td>
            “Pipeline,” Pipeline. https://www.jenkins.io/doc/book/pipeline/.
          </td>
        </tr>


        <tr>
          <td>11.</td>
          <td>(IaaS) Infrastructure as a Service</td>
          <td>
            IaaS might be compared to renting a completely functional kitchen as opposed to creating one yourself. Renting virtualized computing resources like servers, storage, and networking through this cloud computing service frees you up to concentrate on your applications rather than worrying about hardware.
          </td>
          <td>
            Microsoft Azure (2023). What is IaaS? Infrastructure as a Service | Microsoft Azure. [online] azure.microsoft.com. Available at: https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-iaas/.
          </td>
        </tr>
        <tr>
          <td>12.</td>
          <td>Blue-Green Deployment</td>
          <td>
            Imagine having two identical homes next to each other. A technique called Blue-Green Deployment involves having two similar environments: "Blue" represents your existing environment and "Green" represents the new one. Updates are smooth and safe since you can switch between them without experiencing any downtime.
          </td>
          <td>
            “Bliki: BlueGreenDeployment.” n.d. Martinfowler.com. https://martinfowler.com/bliki/BlueGreenDeployment.html.
          </td>
        </tr>
        <tr>
          <td>13.</td>
          <td>Immutable Infrastructure</td>
          <td>
            Imagine your technological set-up as a sculpture that, once created, cannot be altered. The concept of immutable infrastructure states that servers and infrastructure should never be changed. When adjustments are required, you swap them out for brand-new, improved versions. Drift in setup is prevented and consistency is ensured.
          </td>
          <td>
            HashiCorp, “Immutable Infrastructure: Benefits, Comparisons & More,” HashiCorp. https://www.hashicorp.com/resources/what-is-mutable-vs-immutable-infrastructure.
          </td>
        </tr>
        <tr>
          <td>14.</td>
          <td>Chaos Engineering</td>
          <td>
            Consider creating minor, controlled "chaos" in your system on purpose to observe how it responds. In order to assess your application's resilience, chaos engineering introduces failures into a controlled environment. It aids in identifying weak places and enhancing the dependability of your system.
          </td>
          <td>
            principlesofchaos.org. (n.d.). PRINCIPLES OF CHAOS ENGINEERING - Principles of chaos engineering. [online] Available at: https://principlesofchaos.org/.
          </td>
        </tr>
        <tr>
          <td>15.</td>
          <td>Kubernetes</td>
          <td>
            Consider Kubernetes to be your containers' intelligent manager. It automates operations including containerized application deployment, scalability, and management. Running containers in production environments is simple using Kubernetes.
          </td>
          <td>
            Kubernetes. (n.d.). Overview. [online] Available at: https://kubernetes.io/docs/concepts/overview/.
          </td>
        </tr>
        <tr>
          <td>16.</td>
          <td>Artifact Repository</td>
          <td>
            Imagine having a library where you can keep all of your published works. The equivalent for the building blocks of your software is an artifact repository. It serves as a central repository for all of your code, libraries, and dependencies.
          </td>
          <td>
            JFrog. (n.d.). Downloads & Open Source Solutions for Developers and DevOps Experts. [online] Available at: https://jfrog.com/community/open-source/ [Accessed 8 Oct. 2023].
          </td>
        </tr>
        <tr>
          <td>17.</td>
          <td>Elasticsearch</td>
          <td>
            Think of a lightning-quick librarian who can locate any book in a sizable library with ease. For searching and analyzing data, there is something like elasticsearch. It is an effective search and analytics tool for speedy exploration of huge datasets.
          </td>
          <td>
            “Elasticsearch: The Official Distributed Search & Analytics Engine.” n.d. Elastic. https://www.elastic.co/elasticsearch/.
          </td>
        </tr>
        <tr>
          <td>18.</td>
          <td>Serverless Computing</td>
          <td>
            Imagine not needing a permanent kitchen and having a chef available only when you are hungry. In terms of running code, that is serverless computing. It is scalable and cost-effective since it enables you to run functions in response to events without managing servers.
          </td>
          <td>
            azure.microsoft.com. (n.d.). Serverless computing and applications | Microsoft Azure. [online] Available at: https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-serverless-computing/.
          </td>
        </tr>
        <tr>
          <td>19.</td>
          <td>Incident Management</td>
          <td>
            Imagine incident management as a superhero squad that flies in to save the day whenever something goes wrong. To reduce downtime and avoid future problems, it is the process of locating, fixing, and learning from events or breakdowns in your software or infrastructure.
          </td>
          <td>
            Atlassian (n.d.). Incident management best practices and tutorials. [online] Atlassian. Available at: https://www.atlassian.com/incident-management.
          </td>
        </tr>
        <tr>
          <td>20.</td>
          <td>Continuous Deployment</td>
          <td>
            Imagine each and every code change receiving an automatic one-way ticket to production. When code changes pass automated tests, they are automatically delivered to the production environment as part of continuous deployment, which is an extension of continuous delivery. It all revolves around giving users speedy access to new features and repairs.
          </td>
          <td>
            Atlassian (2019). Continuous integration vs. continuous delivery vs. continuous deployment. [online] Atlassian. Available at: https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment.
          </td>
        </tr>


        <tr>
          <td>21.</td>
          <td>GitOps</td>
          <td>
            GitOps is similar to controlling your applications and infrastructure using Git as the single source of truth. Code commits are what trigger changes in infrastructure and configurations, making it simple to track and manage changes.
          </td>
          <td>
            www.weave.workshttps. (n.d.). GitOps what you need to know. [online] Available at: https://www.weave.works/technologies/gitops/.
          </td>
        </tr>
        <tr>
          <td>22.</td>
          <td>Container Orchestration</td>
          <td>
            Container Orchestration is like having an orchestra conductor for your containers. It's the automated management and coordination of containerized applications, ensuring they run efficiently and scale as needed.
          </td>
          <td>
            AWS (n.d.). Amazon ECS - Run containerized applications in production. [online] Amazon Web Services, Inc. Available at: https://aws.amazon.com/ecs/.
          </td>
        </tr>
        <tr>
          <td>23.</td>
          <td>Serverless Framework</td>
          <td>
            Serverless Framework is a toolkit that simplifies the deployment and management of serverless applications. It provides abstractions and automation for cloud resources, making serverless development more accessible.
          </td>
          <td>
            Atlassian, “Incident management best practices and tutorials,” Atlassian. https://www.atlassian.com/incident-management/.
          </td>
        </tr>
        <tr>
          <td>24.</td>
          <td>Blue Ocean</td>
          <td>
            Blue Ocean is a user-friendly and visual interface for Jenkins, a popular automation server. It provides a more intuitive way to create, visualize, and manage Jenkins pipelines and projects.
          </td>
          <td>
            “Getting started with Blue Ocean,” Getting started with Blue Ocean. https://www.jenkins.io/doc/book/blueocean/getting-started/.
          </td>
        </tr>
        <tr>
          <td>25.</td>
          <td>Infrastructure as Code (IaC) Tool</td>
          <td>
            IaC tools like Terraform and Ansible enable you to define and provision infrastructure using code, automating infrastructure setup and management.
          </td>
          <td>
            “What is Infrastructure as Code with Terraform? | Terraform | HashiCorp Developer,” What is Infrastructure as Code with Terraform? | Terraform | HashiCorp Developer. https://developer.hashicorp.com/terraform/tutorials/aws-get-started/infrastructure-as-code.
          </td>
        </tr>
        <tr>
          <td>26.</td>
          <td>GitLab CI/CD</td>
          <td>
            GitLab CI/CD is a built-in continuous integration and continuous delivery platform provided by GitLab. It offers powerful CI/CD capabilities to automate software pipelines.
          </td>
          <td>
            docs.gitlab.com. (n.d.). GitLab CI/CD | GitLab. [online] Available at: https://docs.gitlab.com/ee/ci/.
          </td>
        </tr>
        <tr>
          <td>27.</td>
          <td>Cloud-Native</td>
          <td>
            Cloud-Native refers to applications and services designed to run on cloud platforms, leveraging cloud-native principles like scalability, containerization, and microservices.
          </td>
          <td>
            “Cloud Native Computing Foundation.” n.d. Cloud Native Computing Foundation. https://www.cncf.io/.
          </td>
        </tr>
        <tr>
          <td>28.</td>
          <td>Infrastructure as a Service (IaaS) Provider</td>
          <td>
            IaaS providers like AWS, Azure, and Google Cloud offer virtualized computing resources on-demand, allowing users to rent infrastructure instead of managing physical hardware.
          </td>
          <td>
            rolyon (n.d.). Azure documentation. [online] learn.microsoft.com. Available at: https://learn.microsoft.com/en-us/azure/?product=popular.
          </td>
        </tr>
        <tr>
          <td>29.</td>
          <td>Monitoring and Observability</td>
          <td>
            Monitoring involves tracking the performance and health of applications and infrastructure, while observability goes beyond and includes understanding the internal behavior of systems for effective debugging and troubleshooting.
          </td>
          <td>
            “New Relic | Deliver more perfect software,” New Relic. https://newrelic.com/.
          </td>
        </tr>
        <tr>
          <td>30.</td>
          <td>Configuration Management</td>
          <td>
            Configuration Management is the practice of automating the setup and maintenance of system configurations, ensuring consistency and reducing manual errors.
          </td>
          <td>
            “Site Map — Chef Docs,” Chef.io, 2019. https://docs.chef.io/.
          </td>
        </tr>



        <tr>
          <td>31.</td>
          <td>Site Reliability Engineering (SRE)</td>
          <td>
            Site Reliability Engineering (SRE) is a discipline that combines aspects of software engineering and applies them to infrastructure and operations problems. SREs aim to create scalable and highly reliable software systems.
          </td>
          <td>
            B. Beyer, Niall Richard Murphy, D. K. Rensin, K. Kawahara, and S. Thorne, The Site Reliability Workbook. “O’ Reilly Media, Inc.,” 2018.
          </td>
        </tr>
        <tr>
          <td>32.</td>
          <td>Kanban</td>
          <td>
            Kanban is a visual management method for software development and knowledge work. It helps teams visualize their workflow, limit work in progress, and optimize the efficiency of their processes.
          </td>
          <td>
            Burrows, M. and Hohmann, L. (2014). Kanban from the inside : understand the Kanban method, connect it to what you already know, introduce it with impact. Sequim, Wa: Blue Hole Press.
          </td>
        </tr>
        <tr>
          <td>33.</td>
          <td>Capacity Planning</td>
          <td>
            Capacity planning is the process of determining the computing resources required to support an application's performance and workload, ensuring that the infrastructure can handle the expected load.
          </td>
          <td>
            J. Allspaw, The Art of Capacity Planning. Sebastopol: O’Reilly Media, Inc., 2009.
          </td>
        </tr>
        <tr>
          <td>34.</td>
          <td>Incident Management</td>
          <td>
            Incident management involves identifying, responding to, and resolving incidents or disruptions in an organization's IT services to minimize downtime and maintain service quality.
          </td>
          <td>
            D. Jacobs, Incident Management 97 Success Secrets - 97 Most Asked Questions on Incident Management - What You Need to Know. Emerge Publishing Group Llc, 2013.
          </td>
        </tr>
        <tr>
          <td>35.</td>
          <td>Change Management</td>
          <td>
            Change management is the structured approach to transitioning individuals, teams, and organizations from their current state to a desired future state while minimizing resistance and ensuring successful adoption of changes.
          </td>
          <td>
            [1]van, ASL® 2 - A Framework for Application Management. Van Haren, 1970.
          </td>
        </tr>
        <tr>
          <td>36.</td>
          <td>Elasticity</td>
          <td>
            Elasticity refers to the ability of an IT infrastructure to automatically scale resources up or down in response to changing demands, ensuring optimal performance and cost-efficiency.
          </td>
          <td>
            K. Schmidt and C. Phillips, Programming Elastic MapReduce. “O’Reilly Media, Inc.,” 2013.
          </td>
        </tr>
        <tr>
          <td>37.</td>
          <td>Infrastructure Automation</td>
          <td>
            Infrastructure automation involves using scripts, code, or tools to automatically provision, configure, and manage infrastructure resources, reducing manual tasks and improving consistency.
          </td>
          <td>
            Morris, K. (2016). Infrastructure as Code. ‘O’Reilly Media, Inc.’
          </td>
        </tr>
        <tr>
          <td>38.</td>
          <td>Service Level Agreement (SLA)</td>
          <td>
            A Service Level Agreement is a formal contract that defines the expected level of service between a service provider and a customer. It outlines performance metrics and responsibilities.
          </td>
          <td>
            Shah, Mihir. 2023. Cloud Native Software Security Handbook. Packt Publishing Ltd.
          </td>
        </tr>
        <tr>
          <td>39.</td>
          <td>Continuous Compliance</td>
          <td>
            Continuous Compliance is the practice of automating and integrating compliance checks and security measures into the DevOps pipeline, ensuring that software meets regulatory and security requirements.
          </td>
          <td>
            Mishra, A. (2023). Cloud Security Handbook for Architects. Orange Education Pvt Ltd.
          </td>
        </tr>
        <tr>
          <td>40.</td>
          <td>Infrastructure Monitoring</td>
          <td>
            Infrastructure monitoring involves the real-time tracking and analysis of infrastructure components (e.g., servers, networks, databases) to identify performance issues, bottlenecks, and anomalies.
          </td>
          <td>
            M. Julian, Practical Monitoring. “O’Reilly Media, Inc.,” 2017.
          </td>
        </tr>


        <tr>
          <td>41.</td>
          <td>Root Cause Analysis (RCA)</td>
          <td>
            Root Cause Analysis is a systematic process of identifying and addressing the underlying causes of incidents or problems within an IT environment to prevent recurrence.
          </td>
          <td>
            L. N. Vanden and Abs Consulting, Root cause analysis handbook : a guide to efficient and effective incident investigation. Brookfield, Connecticut: Rothstein Associates Inc, 2008.
          </td>
        </tr>
        <tr>
          <td>42.</td>
          <td>Zero Trust Security</td>
          <td>
            Zero Trust is a security model that assumes no trust, even inside the organization's network. It requires continuous verification of identity and strict access control to protect against security threats.
          </td>
          <td>
            [1]J. Zhou et al., Applied Cryptography and Network Security Workshops. Springer Nature, 2022.
          </td>
        </tr>
        <tr>
          <td>43.</td>
          <td>Shift-Right Testing</td>
          <td>
            Shift-Right Testing focuses on testing in production or post-deployment environments to identify issues, gather real-world feedback, and improve software quality continuously.
          </td>
          <td>
            M. Kaufmann, T. Dohmke, and D. Brown, Accelerate DevOps with GitHub Enhance Software Delivery Performance with GitHub Issues, Projects, Actions, and Advanced Security. Birmingham: Packt Publishing, Limited, 2022.
          </td>
        </tr>
        <tr>
          <td>44.</td>
          <td>Deployment Automation</td>
          <td>
            Deployment Automation involves using scripts, tools, and processes to automate the deployment of software applications and updates, reducing manual errors and accelerating delivery.
          </td>
          <td>
            J. Humble and D. Farley, Continuous Delivery. Pearson Education, 2010.
          </td>
        </tr>
        <tr>
          <td>45.</td>
          <td>Failure Mode and Effects Analysis (FMEA)</td>
          <td>
            FMEA is a structured approach for evaluating and prioritizing potential failure modes and their effects on a system, helping teams proactively address weaknesses.
          </td>
          <td>
            D. H. Stamatis, The ASQ Pocket Guide to Failure Mode and Effect Analysis (FMEA). Quality Press, 2014.
          </td>
        </tr>
        <tr>
          <td>46.</td>
          <td>Service Mesh</td>
          <td>
            A Service Mesh is a dedicated infrastructure layer for handling communication between microservices in a distributed application, providing features like load balancing and security.
          </td>
          <td>
            R. Sharma and A. Singh, Getting Started with Istio Service Mesh : Manage Microservices in Kubernetes. Berkeley, CA: Apress, 2020.
          </td>
        </tr>
        <tr>
          <td>47.</td>
          <td>Automated Testing Framework</td>
          <td>
            An Automated Testing Framework is a set of tools, guidelines, and best practices for designing and executing automated tests. It provides a structured approach to testing software and ensuring its quality.
          </td>
          <td>
            Y. Liang and A. Collins, Selenium Webdriver in Practice. Manning Pubns Co, 2016.
          </td>
        </tr>
        <tr>
          <td>48.</td>
          <td>DevSecOps</td>
          <td>
            DevSecOps is an extension of DevOps that integrates security practices into the software development and deployment process from the beginning. It focuses on building security into every stage of the DevOps pipeline.
          </td>
          <td>
            Y. Bobbert, M. Chtepen, T. Kumar, Y. Vanderbekan, and D. Verslegers, Strategic approaches to digital platform security assurance. Hershey, Pennsylvania (701 E. Chocolate Avenue, Hershey, Pennsylvania, 17033, USA): IGI Global, 2021.
          </td>
        </tr>
        <tr>
          <td>49.</td>
          <td>Observability</td>
          <td>
            Observability is the ability to measure, monitor, and gain insights into the behavior and performance of a system or application in real-time. It helps teams diagnose issues and make data-driven decisions.
          </td>
          <td>
            C. Majors, L. Fong-Jones, and G. Miranda, Observability Engineering. “O’Reilly Media, Inc.,” 2022.
          </td>
        </tr>
        <tr>
          <td>50.</td>
          <td>Value Stream Mapping</td>
          <td>
            Value Stream Mapping is a lean management technique used to analyze, visualize, and optimize the steps and processes involved in delivering value to customers. It helps identify areas for improvement in the software development lifecycle.
          </td>
          <td>
            K. Martin and M. Osterling, Value stream mapping : how to visualize work and align leadership for organizational transformation. New York Mcgraw Hill Professional, 2013.
          </td>
        </tr>



    </tbody>
  </table>
</body>
</html>
